import { serve } from "https://deno.land/std@0.168.0/http/server.ts";
import { createClient } from "https://esm.sh/@supabase/supabase-js@2.39.3";
import { corsHeaders } from "../_shared/cors.ts";

serve(async (req) => {
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders });
  }

  try {
    const supabase = createClient(
      Deno.env.get('SUPABASE_URL') ?? '',
      Deno.env.get('SUPABASE_SERVICE_ROLE_KEY') ?? ''
    );

    console.log('ü§ñ Testing GitHub Integration - Proof of Life');

    const currentTime = new Date().toISOString();
    const proofOfLifeBody = `# ü§ñ Eliza Proof of Life

**Timestamp:** ${currentTime}

## System Status
‚úÖ All systems operational
‚úÖ GitHub OAuth integration active
‚úÖ Edge functions running

## Mining Stats
- Hash Rate: 125 H/s
- Valid Shares: 120,521
- Amount Due: 0.008145506863 XMR
- Total Hashes: 6,910,739,538

## Recent Achievements
- Successfully updated GITHUB_TOKEN
- Tested GitHub OAuth authentication
- Verified edge function connectivity

---
*This message was automatically generated by Eliza to demonstrate GitHub integration capabilities.*`;

    // 1. Create GitHub Issue
    console.log('üìù Creating GitHub issue...');
    const { data: issueData, error: issueError } = await supabase.functions.invoke('github-integration', {
      body: {
        action: 'create_issue',
        data: {
          title: `ü§ñ Eliza Proof of Life - ${currentTime}`,
          body: proofOfLifeBody,
          labels: ['proof-of-life', 'automated', 'eliza', 'test']
        }
      }
    });

    if (issueError) {
      console.error('‚ùå Issue creation error:', issueError);
      return new Response(
        JSON.stringify({ 
          success: false, 
          error: 'Failed to create issue',
          details: issueError 
        }),
        { 
          status: 500,
          headers: { ...corsHeaders, 'Content-Type': 'application/json' } 
        }
      );
    }

    console.log('‚úÖ Issue created:', issueData);

    // 2. Get repository info to get the repository ID for discussions
    console.log('üìä Getting repository info...');
    const { data: repoData, error: repoError } = await supabase.functions.invoke('github-integration', {
      body: {
        action: 'get_repo_info'
      }
    });

    if (repoError) {
      console.error('‚ùå Repo info error:', repoError);
    } else {
      console.log('‚úÖ Repository info retrieved:', repoData);
    }

    // Note: Creating discussions requires repository_id and category_id which are GraphQL node IDs
    // For now, we'll just return success for the issue creation
    // To create discussions, we need to:
    // 1. Get the repository node ID via GraphQL
    // 2. Get the discussion category IDs
    // 3. Then create the discussion

    return new Response(
      JSON.stringify({ 
        success: true,
        message: 'Proof of life posted successfully',
        issue: issueData,
        repository: repoData,
        note: 'Discussion creation requires GraphQL node IDs - see edge function logs for implementation details'
      }),
      { 
        headers: { ...corsHeaders, 'Content-Type': 'application/json' } 
      }
    );

  } catch (error) {
    console.error('‚ùå Test error:', error);
    return new Response(
      JSON.stringify({ 
        success: false,
        error: error instanceof Error ? error.message : 'Unknown error' 
      }),
      { 
        status: 500,
        headers: { ...corsHeaders, 'Content-Type': 'application/json' } 
      }
    );
  }
});
